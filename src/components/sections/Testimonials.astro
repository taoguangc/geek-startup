---
import { Image } from 'astro:assets'
import { getImage } from '../../utils/image'
import quote from '../../images/quote.png'

interface Props {
  title?: string
  image?: string
  customers?: {
    name?: string
    job?: string
    avatar?: string
    testimonial?: string
  }[]
}

const { title = '', image = '', customers = [] } = Astro.props

// 统一处理所有图片
const processImages = async (images: (string | undefined)[]) => {
  return Promise.all(images.map(img => (img ? getImage(img) : null)))
}

const [processedImage, ...processedServiceImages] = await processImages([image, ...customers.map(customer => customer.avatar)])
---

<section class='bg-white mx-auto py-20 md:min-h-screen relative'>
  <div class='container relative'>
    <h2 class='text-4xl font-bold mb-12'>{title}</h2>
    <div class='embla relative pb-12'>
      <div class='embla__viewport overflow-hidden'>
        <div class='embla__container flex'>
          {
            customers.map((customer, index) => (
              <div class='embla__slide flex-[0_0_100%] min-w-0 flex pl-0'>
                <div class='w-1/3 flex flex-col justify-center items-center border-r border-gray-200'>
                  {processedServiceImages[index] && (
                    <Image src={processedServiceImages[index]} alt={customer.name} width={120} height={120} class='mx-auto rounded-full' />
                  )}
                  <h3 class='text-2xl mt-6 mb-2'>{customer.name}</h3>
                  <h4 class='text-md font-light text-gray-500 tracking-widest'>{customer.job}</h4>
                  <div class='arrow-sub' />
                </div>
                <div class='w-2/3 py-16 pl-16'>
                  <div class='mb-16 opacity-10'>
                    <Image src={quote} alt='quote' width={80} height={80} />
                  </div>
                  <p class='text-3xl/12 font-light'>{customer.testimonial}</p>
                </div>
              </div>
            ))
          }
        </div>
      </div>
      <div class='embla__controls mx-auto max-w-xs relative flex justify-between gap-4 mt-4'>
        <button class='embla__button embla__button--prev shadow-lg rounded-full w-12 h-12 flex items-center justify-center hover:bg-gray-50'>
          <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 18 18' fill='currentColor' class='w-6 h-6'>
            <g clip-path='url(#arrow)'>
              <path
                id='path'
                d='M4.8 14.2L15 14.2L15 15.7L2.2 15.7L2.2 3L3.7 3L3.7 13.2L14.5 2.5L15.6 3.59L4.8 14.2Z'
                fill='#171717'
                fill-opacity='1'
                fill-rule='evenodd'></path>
            </g>
          </svg>
        </button>

        <div class='embla__dots mx-auto flex flex-wrap justify-center items-center'></div>

        <button class='embla__button embla__button--next shadow-lg rounded-full w-12 h-12 flex items-center justify-center hover:bg-gray-50'>
          <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 18 18' fill='currentColor' class='w-6 h-6'>
            <g clip-path='url(#arrow)'>
              <path
                id='path'
                d='M13.2 3.8L3 3.8L3 2.3L15.8 2.3L15.8 15L14.3 15L14.3 4.8L3.5 15.5L2.39 14.4L13.2 3.8Z'
                fill='#171717'
                fill-opacity='1'
                fill-rule='evenodd'></path>
            </g>
          </svg>
        </button>
      </div>
    </div>
  </div>
</section>

<script>
  import EmblaCarousel from 'embla-carousel'
  import { addPrevNextBtnsClickHandlers } from '../../scripts/EmblaCarouselArrowButtons'
  import { addDotBtnsAndClickHandlers } from '../../scripts/EmblaCarouselDotButton'

  const OPTIONS = {}

  const emblaNode = document.querySelector('.embla')
  const viewportNode = emblaNode.querySelector('.embla__viewport')
  const prevBtnNode = emblaNode.querySelector('.embla__button--prev')
  const nextBtnNode = emblaNode.querySelector('.embla__button--next')
  const dotsNode = emblaNode.querySelector('.embla__dots')

  const emblaApi = EmblaCarousel(viewportNode, OPTIONS)

  const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(emblaApi, prevBtnNode, nextBtnNode)
  const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(emblaApi, dotsNode)

  emblaApi.on('destroy', removePrevNextBtnsClickHandlers)
  emblaApi.on('destroy', removeDotBtnsAndClickHandlers)
</script>
