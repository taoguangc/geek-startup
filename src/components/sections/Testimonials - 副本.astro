---
import { Image } from 'astro:assets'
import { getImage } from '../../utils/image'
import quote from '../../images/quote.png'

interface Props {
  title?: string
  image?: string
  customers?: {
    name?: string
    job?: string
    avatar?: string
    testimonial?: string
  }[]
}

const { title = '', image = '', customers = [] } = Astro.props

// 统一处理所有图片
const processImages = async (images: (string | undefined)[]) => {
  return Promise.all(images.map(img => (img ? getImage(img) : null)))
}

const [processedImage, ...processedServiceImages] = await processImages([image, ...customers.map(customer => customer.avatar)])
---

<section class='bg-white mx-auto py-20 md:min-h-screen relative'>
  <div class='container relative'>
    <h2 class='text-4xl font-bold mb-12'>{title}</h2>
    <div class='embla relative pb-12'>
      <div class='embla__viewport overflow-hidden'>
        <div class='embla__container flex'>
          {
            customers.map((customer, index) => (
              <div class='embla__slide flex-[0_0_100%] min-w-0 flex pl-0'>
                <div class='w-1/3 flex flex-col justify-center items-center border-r border-gray-200'>
                  {processedServiceImages[index] && (
                    <Image src={processedServiceImages[index]} alt={customer.name} width={120} height={120} class='mx-auto rounded-full' />
                  )}
                  <h3 class='text-2xl mt-6 mb-2'>{customer.name}</h3>
                  <h4 class='text-md font-light text-gray-500 tracking-widest'>{customer.job}</h4>
                  <div class='arrow-sub' />
                </div>
                <div class='w-2/3 py-16 pl-16'>
                  <div class='mb-16 opacity-10'>
                    <Image src={quote} alt='quote' width={80} height={80} />
                  </div>
                  <p class='text-3xl/12 font-light'>{customer.testimonial}</p>
                </div>
              </div>
            ))
          }
        </div>
      </div>
      <div class='embla__controls relative'>
        <button
          class='embla__prev absolute left-0 top-1/2 -translate-y-1/2 bg-white shadow-lg rounded-full w-12 h-12 flex items-center justify-center z-10 hover:bg-gray-50'
        >
          <svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='w-6 h-6'>
            <path stroke-linecap='round' stroke-linejoin='round' d='M15.75 19.5L8.25 12l7.5-7.5'></path>
          </svg>
        </button>
        <button
          class='embla__next absolute right-0 top-1/2 -translate-y-1/2 bg-white shadow-lg rounded-full w-12 h-12 flex items-center justify-center z-10 hover:bg-gray-50'
        >
          <svg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke-width='1.5' stroke='currentColor' class='w-6 h-6'>
            <path stroke-linecap='round' stroke-linejoin='round' d='M8.25 4.5l7.5 7.5-7.5 7.5'></path>
          </svg>
        </button>
        <div class='embla__dots flex justify-center items-center gap-3 mt-6'></div>
      </div>
    </div>
  </div>
</section>

<script>
  import EmblaCarousel from 'embla-carousel'
  import { addPrevNextBtnsClickHandlers } from '../../scripts/EmblaCarouselArrowButtons'
  import { addDotBtnsAndClickHandlers } from '../../scripts/EmblaCarouselDotButton'
  ;(() => {
    const OPTIONS = {
      loop: true,
      dragFree: false,
      skipSnaps: false
    }

    const emblaNode = document.querySelector('.embla')
    if (!emblaNode) {
      console.error('Embla node not found')
      return
    }

    const viewportNode = emblaNode.querySelector('.embla__viewport')
    if (!viewportNode) {
      console.error('Embla viewport not found')
      return
    }

    const prevBtnNode = emblaNode.querySelector('.embla__prev')
    const nextBtnNode = emblaNode.querySelector('.embla__next')
    const dotsNode = emblaNode.querySelector('.embla__dots')

    let emblaApi
    try {
      emblaApi = EmblaCarousel(viewportNode as HTMLElement, OPTIONS)
      console.log('Embla Carousel initialized', emblaApi)
    } catch (e) {
      console.error('Embla Carousel initialization failed', e)
      return
    }

    if (emblaApi) {
      if (prevBtnNode && nextBtnNode) {
        try {
          const removePrevNextBtnsClickHandlers = addPrevNextBtnsClickHandlers(emblaApi, prevBtnNode, nextBtnNode)
          emblaApi.on('destroy', removePrevNextBtnsClickHandlers)
          console.log('Prev/Next buttons click handlers added')
        } catch (e) {
          console.error('Failed to add Prev/Next buttons click handlers', e)
        }
      }

      if (dotsNode) {
        try {
          const removeDotBtnsAndClickHandlers = addDotBtnsAndClickHandlers(emblaApi, dotsNode)
          emblaApi.on('destroy', removeDotBtnsAndClickHandlers)
          console.log('Dot buttons click handlers added')
        } catch (e) {
          console.error('Failed to add Dot buttons click handlers', e)
        }
      }
    } else {
      console.error('Embla API is not available')
    }
  })()
</script>

<style>
  .embla {
    overflow: hidden;
  }

  .embla__container {
    display: flex;
    transform: translate3d(0, 0, 0);
    margin-left: -1rem; /* added to compensate for slide padding */
  }

  .embla__slide {
    position: relative;
    flex: 0 0 100%;
    min-width: 0;
    padding-left: 1rem; /* added padding to create space between slides */
  }

  .embla__dots {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
  }

  .embla__dot {
    -webkit-tap-highlight-color: (rgba(49, 49, 49), 0.5);
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    touch-action: manipulation;
    display: inline-flex;
    text-decoration: none;
    cursor: pointer;
    border: 0;
    padding: 0;
    margin: 0;
    width: 2.6rem;
    height: 2.6rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }
  .embla__dot:after {
    box-shadow: inset 0 0 0 0.2rem #171717;
    width: 1.4rem;
    height: 1.4rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    content: '';
  }
  .embla__dot--selected:after {
    box-shadow: inset 0 0 0 0.2rem #36313d;
  }
</style>
